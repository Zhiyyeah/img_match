import os
import glob
import rasterio
import numpy as np
import netCDF4 as nc

def read_mtl(mtl_path):
    meta = {}
    with open(mtl_path, 'r') as f:
        for line in f:
            if '=' in line:
                key, value = line.strip().split(' = ')
                meta[key.strip()] = value.strip().replace('"', '')
    return meta

def calc_toa_reflectance(dn, mult, add, sun_elev):
    toa = dn * mult + add
    toa = toa / np.sin(np.deg2rad(float(sun_elev)))
    return toa

def main(folder, out_nc):
    # 1. 找到MTL文件
    mtl_files = glob.glob(os.path.join(folder, '*_MTL.txt'))
    if not mtl_files:
        print('未找到MTL元数据文件')
        return
    mtl_path = mtl_files[0]
    meta = read_mtl(mtl_path)
    sun_elev = float(meta['SUN_ELEVATION'])

    # 2. 遍历所有波段TIF
    band_files = sorted(glob.glob(os.path.join(folder, '*_B[1-9].TIF')))
    band_data = {}
    for band_path in band_files:
        band_name = os.path.basename(band_path).split('.')[0]
        band_num = band_name.split('_B')[-1]
        mult = float(meta[f'REFLECTANCE_MULT_BAND_{band_num}'])
        add = float(meta[f'REFLECTANCE_ADD_BAND_{band_num}'])

        with rasterio.open(band_path) as src:
            dn = src.read(1).astype(np.float32)
            profile = src.profile
            if 'lon' not in band_data:
                # 生成经纬度网格，确保shape为(height, width)
                height, width = dn.shape
                transform = src.transform
                rows, cols = np.meshgrid(np.arange(height), np.arange(width), indexing='ij')
                flat_rows = rows.flatten()
                flat_cols = cols.flatten()
                xs, ys = rasterio.transform.xy(transform, flat_rows, flat_cols, offset='center')
                band_data['lon'] = np.array(xs).reshape((height, width))
                band_data['lat'] = np.array(ys).reshape((height, width))
        toa = calc_toa_reflectance(dn, mult, add, sun_elev)
        band_data[f'B{band_num}'] = toa

    # 3. 写入NetCDF
    with nc.Dataset(out_nc, 'w') as ds:
        # 创建维度
        y, x = band_data['lon'].shape
        ds.createDimension('y', y)
        ds.createDimension('x', x)
        # 经纬度
        lon_var = ds.createVariable('lon', 'f4', ('y', 'x'))
        lat_var = ds.createVariable('lat', 'f4', ('y', 'x'))
        lon_var[:] = band_data['lon']
        lat_var[:] = band_data['lat']
        lon_var.long_name = 'Longitude'
        lon_var.units = 'degrees_east'
        lat_var.long_name = 'Latitude'
        lat_var.units = 'degrees_north'
        # 波段
        for k in band_data:
            if k in ['lon', 'lat']:
                continue
            v = ds.createVariable(k, 'f4', ('y', 'x'), zlib=True, complevel=4)
            v[:] = band_data[k]
            v.long_name = f'Landsat9 TOA Reflectance {k}'
            v.units = '1'
        ds.title = 'Landsat9 TOA Reflectance'
        ds.description = 'Generated by cal_TOA.py'
    print(f'NetCDF文件已保存: {out_nc}')

if __name__ == '__main__':
    main(
        r'D:\\Py_Code\\SR_Imagery\\LC09_L1TP_116035_20250504_20250504_02_T1',
        r'D:\\Py_Code\\SR_Imagery\\LC09_L1TP_116035_20250504_20250504_02_T1\\landsat9_TOA.nc'
    )